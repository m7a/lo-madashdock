# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"

# Configuration for telegraf agent
[agent]
  interval = "10s"
  round_interval = true

  metric_batch_size = 2000
  metric_buffer_limit = 20000

  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"

  precision = ""

  # debug = false
  # quiet = false

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for sending metrics to InfluxDB
[[outputs.influxdb]]
  urls = ["https://${MASYSMA_INFLUXDB}:5086"]

  ## The target database for metrics; will be created as needed.
  database = "telegraf1"

  skip_database_creation = true
  timeout = "10s"

  ## HTTP Basic Auth
  username = "masysmawriter"
  password = "${MASYSMAWRITER_PASSWORD}"

  tls_ca = "/media/keys-client/ca.cer"
  tls_cert = "/media/keys-client/client.cer"
  tls_key = "/media/keys-client/client.key"

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

#*****************************************************************************#
#*****************************************************************************#
#*****************************************************************************#
#                                                                             #
# Plugins to collect at default intervals                                     #
#                                                                             #
#*****************************************************************************#
#*****************************************************************************#
#*****************************************************************************#

[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false

[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs", "shm", "nsfs", "binfmt_misc", "sunrpc", "cgroup", "debugfs", "mqueue", "systemd-1", "udev", "sysfs", "nfsd", "hugetblfs"]

[[inputs.diskio]]

[[inputs.kernel]]

[[inputs.mem]]

[[inputs.processes]]

[[inputs.swap]]

[[inputs.system]]

[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"

  gather_services = false

  source_tag = false
  ## Only collect metrics for these containers, collect all if empty
  container_names = []
  container_name_include = []
  container_name_exclude = []

  container_state_include = ["running", "restarting", "paused"]

  timeout = "8s"

  perdevice = false
  total = false

  docker_label_include = []
  docker_label_exclude = []

[[inputs.net]]
  ignore_protocol_stats = true

[[inputs.netstat]]

[[inputs.nvidia_smi]]
  timeout = "5s"

#*****************************************************************************#
#*****************************************************************************#
#*****************************************************************************#
#                                                                             #
# Plugins to collect at less frequent / custom intervals                      #
#                                                                             #
#*****************************************************************************#
#*****************************************************************************#
#*****************************************************************************#

# Monitor APC UPSes connected to apcupsd
[[inputs.apcupsd]]
  servers = ["tcp://127.0.0.1:3551"]
  timeout = "10s"
  interval = "60s"

# depends lm-sensors
[[inputs.sensors]]
  timeout = "8s"
  interval = "120s"

[[inputs.smart]]
  attributes = true
  timeout = "20s"
  interval = "3600s"

#-------------------------------------------------------------------------------
#-- unused ---------------------------------------------------------------------
#-------------------------------------------------------------------------------

# # Read metrics from one or more commands that can output to stdout
# [[inputs.exec]]
#   ## Commands array
#   commands = [
#     "/tmp/test.sh",
#     "/usr/bin/mycollector --foo=bar",
#     "/tmp/collect_*.sh"
#   ]
#
#   ## Timeout for each command to complete.
#   timeout = "5s"
#
#   ## measurement name suffix (for separating different commands)
#   name_suffix = "_mycollector"
#
#   ## Data format to consume.
#   ## Each data format has its own unique set of configuration options, read
#   ## more about them here:
#   ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
#   data_format = "influx"

# # Read stats about given file(s)
# [[inputs.filestat]]
#   ## Files to gather stats about.
#   ## These accept standard unix glob matching rules, but with the addition of
#   ## ** as a "super asterisk". ie:
#   ##   "/var/log/**.log"  -> recursively find all .log files in /var/log
#   ##   "/var/log/*/*.log" -> find all .log files with a parent dir in /var/log
#   ##   "/var/log/apache.log" -> just tail the apache log file
#   ##
#   ## See https://github.com/gobwas/glob for more examples
#   ##
#   files = ["/var/log/**.log"]
#
#   ## If true, read the entire file and calculate an md5 checksum.
#   md5 = false
